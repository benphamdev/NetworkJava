/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/Application.java to edit this template
 */
package bai11displayfoldertree;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.UnsupportedEncodingException;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.StandardCopyOption;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.UIManager;

/**
 *
 * @author benpham
 */
public class MainForm extends javax.swing.JFrame {

    private File logFile;

    /**
     * Creates new form NewApplication
     */
    public MainForm() {
        openLog();
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel_file = new javax.swing.JLabel();
        jTextField_directory = new javax.swing.JTextField();
        jButton_open = new javax.swing.JButton();
        jScrollPane_display = new javax.swing.JScrollPane();
        jTextPane_display = new javax.swing.JTextPane();
        jButton_delete = new javax.swing.JButton();
        jButton_rename = new javax.swing.JButton();
        jButton_copy = new javax.swing.JButton();
        jButton_move = new javax.swing.JButton();
        jButton_log = new javax.swing.JButton();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openMenuItem = new javax.swing.JMenuItem();
        saveMenuItem = new javax.swing.JMenuItem();
        saveAsMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        cutMenuItem = new javax.swing.JMenuItem();
        copyMenuItem = new javax.swing.JMenuItem();
        pasteMenuItem = new javax.swing.JMenuItem();
        deleteMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        contentsMenuItem = new javax.swing.JMenuItem();
        aboutMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel_file.setText("File");

        jTextField_directory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField_directoryActionPerformed(evt);
            }
        });

        jButton_open.setText("Open");
        jButton_open.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_openActionPerformed(evt);
            }
        });

        jScrollPane_display.setViewportView(jTextPane_display);

        jButton_delete.setText("Delete");
        jButton_delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_deleteActionPerformed(evt);
            }
        });

        jButton_rename.setText("Rename");
        jButton_rename.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_renameActionPerformed(evt);
            }
        });

        jButton_copy.setText("Copy");
        jButton_copy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_copyActionPerformed(evt);
            }
        });

        jButton_move.setText("Move");

        jButton_log.setText("Logs");
        jButton_log.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_logActionPerformed(evt);
            }
        });

        fileMenu.setMnemonic('f');
        fileMenu.setText("File");

        openMenuItem.setMnemonic('o');
        openMenuItem.setText("Open");
        fileMenu.add(openMenuItem);

        saveMenuItem.setMnemonic('s');
        saveMenuItem.setText("Save");
        fileMenu.add(saveMenuItem);

        saveAsMenuItem.setMnemonic('a');
        saveAsMenuItem.setText("Save As ...");
        saveAsMenuItem.setDisplayedMnemonicIndex(5);
        fileMenu.add(saveAsMenuItem);

        exitMenuItem.setMnemonic('x');
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        editMenu.setMnemonic('e');
        editMenu.setText("Edit");

        cutMenuItem.setMnemonic('t');
        cutMenuItem.setText("Cut");
        editMenu.add(cutMenuItem);

        copyMenuItem.setMnemonic('y');
        copyMenuItem.setText("Copy");
        editMenu.add(copyMenuItem);

        pasteMenuItem.setMnemonic('p');
        pasteMenuItem.setText("Paste");
        editMenu.add(pasteMenuItem);

        deleteMenuItem.setMnemonic('d');
        deleteMenuItem.setText("Delete");
        editMenu.add(deleteMenuItem);

        menuBar.add(editMenu);

        helpMenu.setMnemonic('h');
        helpMenu.setText("Help");

        contentsMenuItem.setMnemonic('c');
        contentsMenuItem.setText("Contents");
        helpMenu.add(contentsMenuItem);

        aboutMenuItem.setMnemonic('a');
        aboutMenuItem.setText("About");
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton_log)
                        .addGap(47, 47, 47)
                        .addComponent(jButton_copy)
                        .addGap(49, 49, 49)
                        .addComponent(jButton_move)
                        .addGap(42, 42, 42)
                        .addComponent(jButton_rename)
                        .addGap(42, 42, 42)
                        .addComponent(jButton_delete))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane_display)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel_file, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jTextField_directory, javax.swing.GroupLayout.PREFERRED_SIZE, 296, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 225, Short.MAX_VALUE)
                                .addComponent(jButton_open)))))
                .addGap(27, 27, 27))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel_file, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField_directory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton_open))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane_display, javax.swing.GroupLayout.PREFERRED_SIZE, 298, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton_delete)
                    .addComponent(jButton_rename)
                    .addComponent(jButton_copy)
                    .addComponent(jButton_move)
                    .addComponent(jButton_log))
                .addContainerGap(82, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void openLog() {
        try {
            String fileName = "/home/benpham/WorkSpace/Note/baitap.log";
            this.logFile = new File(fileName);

            if (!this.logFile.exists()) {
                this.logFile.createNewFile();
            }

        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    public void writeLog(String msg) {
        try {
            BufferedWriter bw = new BufferedWriter(
                    new OutputStreamWriter(new FileOutputStream(this.logFile, true), StandardCharsets.UTF_8));

            LocalDateTime dateTime = LocalDateTime.now();
            DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");

            String time = dateTime.format(dateTimeFormatter),
                    username = System.getProperty("user.name");

            bw.append(time + " " + username + " " + msg);
            bw.newLine();
            bw.flush();
            bw.close();
        } catch (Exception e) {
            e.printStackTrace();
        }

    }
    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void jTextField_directoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField_directoryActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField_directoryActionPerformed

    private void jButton_openActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_openActionPerformed
        // TODO add your handling code here:

        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        int res = fileChooser.showOpenDialog(this);

        if (res == JFileChooser.APPROVE_OPTION) {
            String path = fileChooser.getSelectedFile().getAbsolutePath();
            jTextField_directory.setText(path);
            jTextPane_display.setText(listAllFiles(path, 0));
        }

        writeLog("mở " + jTextField_directory.getText());
    }//GEN-LAST:event_jButton_openActionPerformed

    private void jButton_deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_deleteActionPerformed
        // TODO add your handling code here:
        int choose = JOptionPane
                .showConfirmDialog(this, "Are  you sure all files");

        if (choose == JOptionPane.NO_OPTION) {
            return;
        }

        String path = jTextField_directory.getText();
        deleteFiles(path);
        // flush

        writeLog("xóa " + jTextField_directory.getText());
    }//GEN-LAST:event_jButton_deleteActionPerformed

    private void jButton_renameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_renameActionPerformed
        // TODO add your handling code here:
        String newNameFile = (String) JOptionPane.showInputDialog(this, "Input new name file");

        try {
            String path = jTextField_directory.getText();

            File oldFile = new File(path);

            File newFile = new File(oldFile.getParent() + "/" + newNameFile);

            if (oldFile.renameTo(newFile)) {
                jTextField_directory.setText(newFile.getAbsolutePath());
                jTextPane_display.setText(newFile.getName());
                JOptionPane.showMessageDialog(this, "success");
                writeLog("thay đổi tên file thành :  " + jTextField_directory.getText());
            } else {
                JOptionPane.showMessageDialog(this, "failed");
                writeLog("không thể thay đổi tên file");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButton_renameActionPerformed

    private void jButton_copyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_copyActionPerformed
        // TODO add your handling code here:

        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int res = fileChooser.showOpenDialog(this);

        if (res == JFileChooser.APPROVE_OPTION) {
            String src = jTextField_directory.getText(),
                    des = fileChooser.getSelectedFile().getAbsolutePath();

//            try {
//                copyFolder(srcPath, desPath);
//                JOptionPane.showMessageDialog(this, "Success");
//            } catch (IOException ex) {
//                JOptionPane.showMessageDialog(this, "Fail");
//                Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
//            }
            copy(src, des);
        }
        writeLog("thực hiện thao tác copy " + jTextField_directory.getText());
    }//GEN-LAST:event_jButton_copyActionPerformed

    private void jButton_logActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_logActionPerformed
        // TODO add your handling code here:
        // reader
        try {
            BufferedReader bufferedReader = new BufferedReader(
                    new InputStreamReader(new FileInputStream(this.logFile), StandardCharsets.UTF_8));
            String str = "", ans = "";
            while ((str = bufferedReader.readLine()) != null) {
                ans += str + '\n';
            }
            jTextPane_display.setText(ans);
            bufferedReader.close();
        } catch (UnsupportedEncodingException e) {
            System.out.println(e.getMessage());
            writeLog(e.getMessage());
        } catch (IOException e) {
            System.out.println(e.getMessage());
            writeLog(e.getMessage());
        } catch (Exception e) {
            e.printStackTrace();
            writeLog(e.getMessage());
        }
    }//GEN-LAST:event_jButton_logActionPerformed

    private void copy(String src, String des) {
        try {
            Path srcPath = Path.of(src),
                    desPath = Path.of(des);

            Path newPath = desPath.resolve(srcPath.getFileName());

            Files.copy(srcPath,
                    newPath,
                    StandardCopyOption.COPY_ATTRIBUTES
            );

            File myFile = new File(src);

            if (myFile.isDirectory()) {
                for (File f : myFile.listFiles()) {
                    copy(f.getAbsolutePath(), des + "/" + srcPath.getFileName());
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
//    public static void copyFolder(Path src, Path dest) throws IOException {
//        try (Stream<Path> stream = Files.walk(src)) {
//            stream.forEach(source -> copy(source, dest.resolve(src.relativize(source))));
//        }
//    }
//
//    private static void copy(Path source, Path dest) {
//        try {
//            Files.copy(source, dest, StandardCopyOption.REPLACE_EXISTING);
//        } catch (Exception e) {
//            throw new RuntimeException(e.getMessage(), e);
//        }
//    }

    private void deleteFiles(String path) {
        try {
            File file = new File(path);

            if (file.isDirectory()) {
                for (File f : file.listFiles()) {
                    deleteFiles(f.getAbsolutePath());
                }
            }

            file.delete();

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private String listAllFiles(String path, int level) {
        File file = new File(path);

        if (!file.exists()) {
            return "";
        }

        String res = "";

        for (int i = 0; i < level; i++) {
            res += '\t';
        }

        res += (level == 0 ? "" : "|") + file.getName();

        if (file.isFile()) {
            return res + "\n";
        }

        res += ":\n";

        for (File f : file.listFiles()) {
            res += listAllFiles(f.getAbsolutePath(), level + 1) + "\n";
        }
        return res;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (Exception e) {
        }
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JMenuItem contentsMenuItem;
    private javax.swing.JMenuItem copyMenuItem;
    private javax.swing.JMenuItem cutMenuItem;
    private javax.swing.JMenuItem deleteMenuItem;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JButton jButton_copy;
    private javax.swing.JButton jButton_delete;
    private javax.swing.JButton jButton_log;
    private javax.swing.JButton jButton_move;
    private javax.swing.JButton jButton_open;
    private javax.swing.JButton jButton_rename;
    private javax.swing.JLabel jLabel_file;
    private javax.swing.JScrollPane jScrollPane_display;
    private javax.swing.JTextField jTextField_directory;
    private javax.swing.JTextPane jTextPane_display;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JMenuItem pasteMenuItem;
    private javax.swing.JMenuItem saveAsMenuItem;
    private javax.swing.JMenuItem saveMenuItem;
    // End of variables declaration//GEN-END:variables

}
